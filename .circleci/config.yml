version: 2
jobs:
  app-unit:
    docker:
      - image: circleci/python:3.7-node
        user: root
        environment:
          SECRET_KEY: secret
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
      - image: postgres:11.1
    steps:
      - checkout
      - restore_cache:
          key: deps9-{{ .Branch }}-{{ checksum "poetry.lock" }}
      - run:
          name: install python deps
          command: |
            pip install poetry
            poetry config settings.virtualenvs.create false
            poetry install
      - save_cache:
          key: deps9-{{ .Branch }}-{{ checksum "poetry.lock" }}
          paths:
            - "/usr/local/bin"
            - "/usr/local/lib/python3.7/site-packages"
      - run:
          name: run migrations
          command: |
            python manage.py migrate
      - run:
          name: run django tests
          command: pytest
  app-integ:
    docker:
      - image: circleci/python:3.7-node
        user: root
        environment:
          SECRET_KEY: secret
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
      - image: postgres:11.1
    steps:
      - checkout
      - restore_cache:
          key: deps9-{{ .Branch }}-{{ checksum "poetry.lock" }}
      - run:
          name: install python deps
          command: |
            pip install poetry
            poetry config settings.virtualenvs.create false
            poetry install
      - save_cache:
          key: deps9-{{ .Branch }}-{{ checksum "poetry.lock" }}
          paths:
            - "/usr/local/bin"
            - "/usr/local/lib/python3.7/site-packages"
      - run:
          name: run migrations
          command: |
            python manage.py migrate
      - run:
          name: create admin
          command: |
            python manage.py shell -c "from django.contrib.auth import get_user_model; get_user_model().objects.create_superuser(admin, 'admin')"
      - run:
          name: run postman tests
          command: |
            python manage.py runserver &
            APIURL=http://localhost:8000/api ./postman_tests/run-api-tests.sh
  build-prod:
    docker:
      - image: circleci/python:3.7-node
        user: root
    steps:
      - checkout
      - setup_remote_docker:
            docker_layer_caching: true
      - run:
          name: install docker
          command: |
            VER="18.09.1"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv -f /tmp/docker/* /usr/bin
      - run:
          name: build image and push to registry as prod image
          command: |
            docker build -t ippolab/athena-backend .
            docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
            docker push ippolab/athena-backend
  deploy-prod:
    machine:
      enabled: true
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "47:17:34:6e:e2:15:27:19:52:7a:af:bd:93:ce:50:32"
      - run:
          name: connect to droplet and update instance
          command: |
            ssh $SSH_USER@$SSH_HOST "cd athena && export HOSTNAME=$ATHENA_BASE_HOSTNAME && docker-compose stop back && docker-compose rm --force back && docker-compose pull back && docker-compose up -d"
workflows:
  version: 2
  main:
    jobs:
      - app-unit
      - app-integ
      - build-prod:
          requires:
            - app-unit
            - app-integ
          filters:
            branches:
              only: master
      - deploy-prod:
          requires:
            - build-prod
          filters:
            branches:
              only: master